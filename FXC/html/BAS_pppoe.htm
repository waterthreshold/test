<html>
<head>
<title>W6B-T223-001</title>
<meta content="width=device-width, initial-scale=1.0, shrink-to-fit=no" name="viewport">
<link href="css/new_custom.css" rel="stylesheet" type="text/css">
<script src="jquery.js"></script>
<script src="script/script.js"></script>
<script src="func.js"></script>
<script src="utility.js"></script>
</head>

<body onload="SkipParentalControlCheck=0" class="page-body">
<div class="container-fluid frame-content" id="frame-content">
    <div class="row">
        <div class="col-md-12">
            <form id="target"  name="formname" method="POST" action="SetBasEtherPppoe.cgi">
                <input type="hidden" name="buttonHit">
                <input type="hidden" name="buttonValue"> 
                <div class="card card-notify card-yellow ">
                    <div class="card-header card-flex">
                        <div class="card-title">Does your Internet connection require a login?</div>
                        <div class="card-margin-left">
                            <button type="button" name="Edit" class="btn" onClick="doTypeChange(0)">NO</button>
                            <button type="button" name="Edit" class="btn" onClick="doTypeChange(1)">YES</button>
                        </div>
                    </div>

                    <input type="hidden" id="loginreq" name="loginreq" value="pppoe">
                </div>
                <div class="card">
                    <div class="card-header">
                        <ul class="nav nav-pills">
                            <li class="nav-item">
                                <a class="nav-link active">PPPoE</a>
                            </li>
                           <!-- <li class="nav-item" onclick="window.location.href='BAS_pptp.htm'">
                                <a class="nav-link">PPTP</a>
                            </li>
                            <li class="nav-item" onclick="window.location.href='BAS_l2tp.htm'">
                                <a class="nav-link">L2TP</a>
                            </li>-->
                        </ul>
                    </div>
                    <div class="card-body">
                     
                        <div class="mui-textfield">
                            <input id="pppoe_username" type="text" class="form-control" name="pppoe_username" maxlength="63" value="">
                            <label tabindex="-1">Login</label>
                        </div>
                        <div class="mui-textfield">
                            <input id="pppoe_passwd" type="password" class="form-control" name="pppoe_passwd" maxlength="63" value="" onfocus="pw_onfocus();">
                            <label tabindex="-1">Password</label>
                        </div>
                        <div class="mui-textfield">
                            <input id="pppoe_servicename" class="form-control" type="text" name="pppoe_servicename" maxlength="63" value="">
                            <label tabindex="-1">Service Name (If Required)</label>
                        </div>
                        <div class="mui-textfield">
                            <select class="form-control" id="pppoe_dod" name="pppoe_dod" onChange="setConnMode()" size="1">
                                <option value=0>Always On</option>
                                <option value=1>Dial on Demand</option>
                                <option value=2>Manually Connect</option>
                            </select>
                            <label tabindex="-1">Connection Mode</label>
                        </div>
                        <div class="mui-textfield">
                            <input id="pppoe_idletime" class="form-control" type="text" name="pppoe_idletime" maxlength="3">
                            <label tabindex="-1">Idle Timeout (In Minutes)</label>
                        </div>
                    </div>
             
               
                    <div class="card-divider"></div>
                    <div class="card-subheader">
                        <div class="card-title">IP Address Setup</div>
                    </div>
                    <div class="card-body">
                        <p>Internet IP Address</p>
                        <div class="form-check form-check-radio">
                            <label class="form-check-label">
                                <input class="form-check-input" id="wan_assign_dynamic" type="radio" name="WANAssign" value="Dynamic" onClick="setIP()">
                                Get Dynamically from ISP
                                <span class="circle">
                                    <span class="check"></span>
                                </span>
                            </label>
                        </div>
                        <div class="form-check form-check-radio form-check-next">
                            <label class="form-check-label">
                                <input class="form-check-input" id="wan_assign_fixed" type="radio" name="WANAssign" value="Fixed" onClick="setIP()">
                                Use Static IP Address
                                <span class="circle">
                                    <span class="check"></span>
                                </span>
                            </label>
                        </div>
                        <div class="mui-textfield input-ip mui-textfield-next">
                            <input id="wpethr1" type="text" name="WPethr1" class="form-control" maxlength="3" onFocus="if(DisableFixedIP) this.blur()" onkeydown="bscheck(event,this,1)" onkeyup="jumpcheck(this,0)">.
                            <input id="wpethr2" type="text" name="WPethr2" class="form-control" maxlength="3" onFocus="if(DisableFixedIP) this.blur()" onkeydown="bscheck(event,this,0)" onkeyup="jumpcheck(this,0)">.
                            <input id="wpethr3" type="text" name="WPethr3" class="form-control" maxlength="3" onFocus="if(DisableFixedIP) this.blur()" onkeydown="bscheck(event,this,0)" onkeyup="jumpcheck(this,0)">.
                            <input id="wpethr4" type="text" name="WPethr4" class="form-control" maxlength="3" onFocus="if(DisableFixedIP) this.blur()" onkeydown="bscheck(event,this,0)" onkeyup="jumpcheck(this,1)">
                        </div>
                    </div>
                    <div class="card-divider"></div>
                    <div class="card-subheader">
                        <div class="card-title">DNS Address Setup</div>
                    </div>
                    <div class="card-body">
                        <p>Domain Name Server (DNS) Address</p>
                        <div class="form-check form-check-radio">
                            <label class="form-check-label">
                                <input class="form-check-input" id="dns_assign_auto" type="radio" name="DNSAssign" value="0" onClick="setDNS()">
                                Get Automatically from ISP
                                <span class="circle">
                                    <span class="check"></span>
                                </span>
                            </label>
                        </div>
                        <div class="form-check form-check-radio form-check-next">
                            <label class="form-check-label">
                                <input class="form-check-input" id="dns_assign_static" type="radio" name="DNSAssign" value="1" onClick="setDNS()">
                                Use These DNS Servers
                                <span class="circle">
                                    <span class="check"></span>
                                </span>
                            </label>
                        </div>
                        <div class="mui-textfield input-ip">
                            <input id="daddr1" type="text" name="DAddr1" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,1)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,0)">.
                            <input id="daddr2" type="text" name="DAddr2" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,0)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,0)">.
                            <input id="daddr3" type="text" name="DAddr3" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,0)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,0)">.
                            <input id="daddr4" type="text" name="DAddr4" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,0)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,1)">
                            <label tabindex="-1">Primary DNS</label>
                        </div>
                        <div class="mui-textfield input-ip">
                            <input id="pdaddr1" type="text" name="PDAddr1" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,1)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,0)">.
                            <input id="pdaddr2" type="text" name="PDAddr2" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,0)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,0)">.
                            <input id="pdaddr3" type="text" name="PDAddr3" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,0)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,0)">.
                            <input id="pdaddr4" type="text" name="PDAddr4" class="form-control" maxlength="3" onFocus="if(DisableFixedDNS) this.blur()" onkeydown="if(isParentalControlEnable()) return false;bscheck(event,this,0)" onkeyup="if(isParentalControlEnable()){ alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');return false;} jumpcheck(this,1)">
                            <label tabindex="-1">Secondary DNS</label>
                        </div>
                    </div>
              
                    <div class="card-bottom">
                        <div class="pull-right">
                            <button id="apply" type="submit" value="SUBMIT"  onClick="buttonClick(this,'Apply');return checkData()" name="apply" class="btn btn-primary btn-mg-15 btn-round" >Apply</button>
                        </div>
                    </div>
                </div>
<!--
                <input type="hidden" name="runtest" value="<% basic_cgi_get_param("runtest"); %>">
                <input name=wan_ipaddr type=hidden value= "NVRAM_wan_ipaddr">
                <input name=pppoe_localip type=hidden value= "NVRAM_pppoe_localip">
                <input name=pppoe_user_ip type=hidden value= "NVRAM_pppoe_user_ip">
                <input name=wan_dns_sel type=hidden value= "NVRAM_wan_dns_sel">
                <input name=wan_dns1_pri type=hidden value= "<% nvram_list("wan_dns1", 0); %>">
                <input name=wan_dns1_sec type=hidden value= "<% nvram_list("wan_dns1", 1); %>">
                <input name=wan_hwaddr_sel type=hidden value= "NVRAM_wan_hwaddr_sel">
                <input name=wan_hwaddr_def type=hidden value= "NVRAM_wan_hwaddr">
                <input name=wan_hwaddr2 type=hidden value= "NVRAM_wan_hwaddr2">
                <input name=wan_hwaddr_pc type=hidden value= "<% basic_cgi_get_param("pcmac"); %>">
                <input name=opendns_parental_ctrl type=hidden value= "NVRAM_ParentalControl">
                <input name=pppoe_flet_sel type=hidden value= "NVRAM_pppoe_flet_sel">
                <input name=pppoe_flet_type type=hidden value= "NVRAM_pppoe_flet_type">
                <input name=pppoe_temp type=hidden value= "NVRAM_pppoe2_temp_type">
                <input name=pppoe_gateway type=hidden value="NVRAM_pppoe_localgateway">
                <input name=gui_region type=hidden value="<%lang_cgi_get_param("gui_region");%>">
                <input name=pppoe_user_netmask type=hidden value="NVRAM_pppoe_localnetmask">
          
                <input name=static_pppoe_enable type=hidden value= "NVRAM_static_pppoe_enable">
                <input name=pppoe_ip_sel type=hidden value= "NVRAM_pppoe_ip_sel">
                <input name=gui_language type=hidden value= "NVRAM_gui_region">
                <input name=auto_time type=hidden value= "NVRAM_auto_conn_time">
                <input name=ipv6_proto type=hidden value= "NVRAM_ipv6_proto">
                <input name=ipv6_proto_auto type=hidden value= "NVRAM_ipv6_proto_auto">
                <input name=auto_conn_time_default type=hidden value= "0">
                <input name=dial_on_demand_warning type=hidden value= "<% get_dial_demand_warning(); %>">
                <input name=parental_control type=hidden value= "NVRAM_ParentalControl">
                <input name=parental_circle type=hidden value= "NVRAM_enable_circle_control">
                <input name=wan_auto_dns_pri type=hidden value= "<% nvram_list("wan_dns", 0); %>">
                <input name=wan_auto_dns_sec type=hidden value= "<% nvram_list("wan_dns", 1); %>">
                <input name="wan_aggr" type=hidden value="NVRAM_bond_wan">
                <input name=wan_proto type=hidden value= "NVRAM_wan_proto">
                <input name=spc_provisioned type=hidden value= "<% d2_match("CircleStatus.activationStatus","provisioned","1"); %>">
                <input name=enable_ap_mode type=hidden value= "NVRAM_enable_ap_mode">-->
            </form>
        </div>
    </div>
</div>
</body>

<script>
var DisableFixedIP = false;
var DisableFixedDNS = false;
var DisableFixedMAC = false;
var MacAddress;
var DodDisable = false;
var DodIndex = "0";
var SkipParentalControlCheck=1
var CurrentDodIndex;
function getData (){
	var formdata = {};
	if ($('#wan_assign_fixed').attr('checked'))
		formdata.pppoe_wan_sel= "1"
	else 
		formdata.pppoe_wan_sel= "0"
	formdata.pppoe_username=$('#pppoe_username').val()
	formdata.pppoe_passwd=$('#pppoe_passwd').val()
	formdata.pppoe_servicename=$('#pppoe_servicename').val()
	formdata.pppoe_idletime=$('#pppoe_idletime').val()
	
	formdata.pppoe_localip=coltoip("wpethr")
	
	if ($('#dns_assign_static').attr('checked') )
		formdata.pppoe_wan_dns_sel="1";
	else 		
		formdata.pppoe_wan_dns_sel="0";
	formdata.pppoe_wan_dns1 =coltoip('daddr')
	formdata.pppoe_wan_dns2=coltoip('pdaddr')
		
	return formdata
}
$(document).ready(function()
{   
     $("#target").submit(function(e) {
		e.preventDefault();
		var formdata = getData()
		console.log (formdata)
		$.ajax({
			type: "POST",
			url: $('#target').attr('action'), 
			contentType: "application/json",
			data: JSON.stringify(formdata),
			dataType: "json",
			success: function(response) {
			  console.log("Success:", response);
			},
			error: function(error) {
			  console.error("Error:", error);
			}
      });
        buttonFilter();
		location.reload()
		
    });
	init_setting ()
});
function iptocol (ip ,preffix) {
	var arr_ip = ip.split('.')
	for (var i = 0 ;i < arr_ip.length; i++) {
		let id_item =  preffix+ (i+1)
		document.getElementById(id_item).value = arr_ip[i]
	}
}
function coltoip(preffix) {
	var ip =""
	for (var i=1; i<=4 ;i++ ) {
		idname= preffix+i
		 ip += document.getElementById(idname).value
		 if (i!=4)
			ip+="."
	}
	
	return ip;
}
function init_setting () {
	
	$.get("GetBasEtherPppoe.cgi",function (data){
			
			const  param = $.parseJSON(JSON.stringify(data))
			
			wan_proto = param.wan_proto;
			pppoe_username =  param.pppoe_username
			$('#pppoe_username').val(pppoe_username)
			pppoe_passwd =  param.pppoe_passwd
			$('#pppoe_passwd').val(pppoe_passwd)
			pppoe_servicename =  param.pppoe_servicename
			$('#pppoe_servicename').val(pppoe_servicename)
			pppoe_idletime =  param.pppoe_idletime
			$('#pppoe_idletime').val(pppoe_idletime)
			
			pppoe_dod =  param.pppoe_dod
			$('#pppoe_dod').val(pppoe_dod)
			
			pppoe_wan_sel = param.pppoe_wan_sel
			//ui_show(wan_proto)
			
			if ( pppoe_wan_sel == "1")
				$('#wan_assign_fixed').attr("checked",true)
			
			else {
				$('#wan_assign_dynamic').attr("checked",true)
			}
			pppoe_localip= param.pppoe_localip
			iptocol(pppoe_localip, "wpethr");
			pppoe_wan_dns_sel = param.pppoe_wan_dns_sel
			if ( pppoe_wan_dns_sel == "1")
				$('#dns_assign_static').attr("checked",true)
			
			else {
				$('#dns_assign_auto').attr("checked",true)
			}
			pppoe_wan_dns1= param.pppoe_wan_dns1
			iptocol(pppoe_wan_dns1, "daddr");
			pppoe_wan_dns2= param.pppoe_wan_dns2
			iptocol(pppoe_wan_dns2, "pdaddr");
			
	
	});


/*
wan_assign_dynamic
*/

}
function checkType(wan_proto) // called from basictop.htm
{
    if (1)
    {
        if (wan_proto == "pppoe")
            window.location.href = "BAS_pppoe.htm";
       /* else if (wan_proto == "pptp")
            window.location.href = "BAS_pptp.htm";
        else if (wan_proto == "bpa")
            window.location.href = "BAS_bpa.htm";
        else if (wan_proto == "l2tp")
            window.location.href = "BAS_l2tp.htm";*/
       
        else
            window.location.href = "BAS_ether.htm";
    }
    else 
        window.setTimeout(checkType(),300);
}

//var autoconn_flag=((gui_region == "German" &&  (netgear_region == "" || netgear_region.toUpperCase() == "WW")) || netgear_region.toUpperCase() == "GR") ? 1 : 0;
//var autoconn_flag=(document.forms[0].gui_language.value == "German") ? 1 : 0;
var autoconn_flag=("NVRAM_gui_region" == "German") ? 1 : 0;
//var autoconn_flag=1;
if(autoconn_flag == 1)
{
    var sSpan ; 
    var sDiv ; 
    var sUl ; 
    var sLi ; 
    var slt; 
    var optLen ;
    var tmp;  
    var zQuery=function(ele,tagName,className){ //core object 
    if ( window == this ) return new zQuery(ele,tagName,className); 
        if(!arr){var arr=new Array;} 
        if(ele){ 
            if(ele.constructor!=zQuery){ 
                var elem=typeof(ele)=="object"?ele:document.getElementById(ele); 
                if(!tagName){ 
                    arr.push(elem); 
                }else{ 
                    //var tags=elem.all&&(!(window.opera?(tagName=="*"?elem.all:elem.all.tags(tagName)):(elem.getElementsByTagName(tagName)))); 
                    var tags=elem.all&&!window.opera?tagName=="*"?elem.all:elem.all.tags(tagName):elem.getElementsByTagName(tagName); 
                    if(!className){ 
                        for(var i=0, l=tags.length; i<l; i++){ 
                            arr.push(tags[i]); 
                        } 
                    }else{ 
                        var reClassName=RegExp("(^|\\s+)"+className+"(|\\s+)"); 
                        for(var i=0, l=tags.length; i<l; i++){ 
                            if(reClassName.test(tags[i].className)){ 
                                arr.push(tags[i]); 
                            } 
                        } 
                    } 
                } 
            }else{ 
                for(var i=0, l=ele.length; i<l; i++){ 
                    arr=arr.concat(Array.prototype.slice.call(zQuery(ele[i],tagName,className))); 
                } 
            } 
        } 
        return this.setArray(arr);  
    } 
    zQuery.prototype.setArray = function( arr ) { 
        this.length = 0; 
        Array.prototype.push.apply( this, arr );  
        return this; 
    } 
    zQuery.fn=zQuery.prototype; 
    //var =zQuery; 

    //obtain the absolute position of select 
    function Offset(obj){ 
        var t = obj.offsetTop; 
        var l = obj.offsetLeft; 
        var w = obj.offsetWidth; 
        var h = obj.offsetHeight-2; 
        //var h=obj.style.height; 
        while(obj=obj.offsetParent) 
        { 
            t+=obj.offsetTop; 
            l+=obj.offsetLeft; 
        } 
        return { 
            top : t, 
            left : l, 
            width : w, 
            height : h 
        } 
    }

    //simulation select 

    function getEvent(){ 
         //compatible with ie and ff 
         if(document.all)    return window.event; 
         func=getEvent.caller; 
         while(func!=null){ 
             var arg0=func.arguments[0]; 
             if(arg0){ 
                 if((arg0.constructor==Event || arg0.constructor ==MouseEvent) 
                    || (typeof(arg0)=="object" && arg0.preventDefault && arg0.stopPropagation)){     
                    return arg0; 
                  } 
             } 
              func=func.caller; 
            } 
            return null; 
    }
    //obtion the number of select, and execut the function
    function initSelect(){ 
        //alert("InitSelect");
        slt=zQuery(document,"select"); 
        var sltLen=slt.length; 
        for(var i=0;i<sltLen;i++){  
            if(slt[i].name == "auto_conn_time")
            instSelect(slt[i]); 
        }
    } 
}

function loadcheck()
{
    var cf = document.forms[0];


    setIP();
    setDNS();
    setMAC();
}
function setIP()
{
    var cf = document.forms[0];
    var dflag = cf.WANAssign[0].checked;
    var region_gui = cf.gui_region.value;
    setDisabled(dflag,cf.WPethr1,cf.WPethr2,cf.WPethr3,cf.WPethr4);
    
    DisableFixedIP = dflag;
}

function isParentalControlEnable()
{
    var cf = document.forms[0];
    if(((cf.parental_control.value=='1')) && (SkipParentalControlCheck==0))
        return true;
    else
        return false;
}

function isCircleControlEnable()
{
    var cf = document.forms[0];
    if(( (cf.parental_circle.value=='1')) && (SkipParentalControlCheck==0))
        return true;
    else
        return false;
}

function isSPCEnable()
{
    var cf = document.forms[0];
    if(( (cf.spc_provisioned.value=='1')) && (cf.enable_ap_mode.value!='1'))
        return true;
    else
        return false;
}

function setDNS()
{
    var cf = document.forms[0];
    var dflag = cf.DNSAssign[0].checked;

  if(isParentalControlEnable() && cf.DNSAssign[0].checked)
  {
    alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');
        cf.DNSAssign[1].checked=true;
    dflag=false;      
  }

    if(isCircleControlEnable() && cf.DNSAssign[1].checked)
    {
        alert('The DNS Server setup will not take effect due to Parental Controls is enabled. If you need to configure DNS manually, please disable the Parental Controls.');
        cf.DNSAssign[0].checked=true;
    }

    if(isSPCEnable())
    {
        dflag=true; 
    }
    setDisabled(dflag,cf.DAddr1,cf.DAddr2,cf.DAddr3,cf.DAddr4,cf.PDAddr1,cf.PDAddr2,cf.PDAddr3,cf.PDAddr4);
    DisableFixedDNS = dflag;
}
function setMAC()
{
    var cf = document.forms[0];



}

function show_idleout(form,conn_mode)
{
    var cf = document.forms[0];
    if(conn_mode == 1) // Dial on Demand
    {
        DodDisable = false;
        if(cf.gui_language.value == "German")
        {
              
            var List = document.getElementById('auto_conn_time_id');          
            cf.auto_conn_24hr.disabled = true;
            List.disabled = true;
        }
    }
    else
    {
        DodDisable = true;
        if(cf.gui_language.value == "German")
        {
            //sSpan.style.background="url(selects_disabled.gif) no-repeat right center"; 
            var List = document.getElementById('auto_conn_time_id');           
            cf.auto_conn_24hr.disabled = false;
            List.disabled = false;


        }
    }
}

function setConnMode()
{
    var cf = document.forms[0];
    var conn_mode = cf.pppoe_dod.selectedIndex;

/*
    if(conn_mode == 1) // Dial on Demand
    {
        DodDisable = false;
        if(cf.gui_language.value == "German")
        {
            cf.auto_conn_24hr.disabled = true;
            cf.auto_conn_time.disabled = true;
        }
    }
    else
    {
        DodDisable = true;
        if(cf.gui_language.value == "German")
        {
            cf.auto_conn_24hr.disabled = false;
            cf.auto_conn_time.disabled = false;
        }
    }
*/
    show_idleout(cf, conn_mode);

    var msg = "";
    if((conn_mode != 1) && !_isNumeric(cf.pppoe_idletime.value))
    {
        cf.pppoe_dod.selectedIndex = DodIndex;
        if(cf.pppoe_idletime.value.length<=0)
            msg+= "Please enter the idle time.n";
        else if(!_isNumeric(cf.pppoe_idletime.value))
            msg+= "Invalid idle time,please enter proper numeral.";
        if (msg.length > 1)
        {
            alert(msg);
            return false;
        }
    }
    else
    {
        DodIndex = cf.pppoe_dod.selectedIndex;
        setDisabled(DodDisable,cf.pppoe_idletime);
    }
    return true;
}

function checkData()
{
    var cf = document.forms[0];
    var msg = "";
    var region_gui = cf.gui_region.value;
    var wan_ip  = "NVRAM_pppoe_localip";
    var openvpnEnable = "NVRAM_openvpnActive";
    var conn_mode = cf.pppoe_dod.selectedIndex;

    if(cf.dial_on_demand_warning.value==1)
    {

                
          {
            if((conn_mode == 1 || conn_mode == 2) ) // Dial on Demand and manually
            {
                if(!confirm(""))
                {
                      cf.pppoe_dod.selectedIndex=CurrentDodIndex;
                    return false;
                }
            }
        }
    }


    msg+= checkBlank(cf.pppoe_username, "User Name");
    if(cf.pppoe_idletime.value.length<=0)
        msg+= "Please enter the idle time.n";
    else if(!_isNumeric(cf.pppoe_idletime.value))
        msg+= "Invalid idle time,please enter proper numeral.";
    
    if (region_gui == "Russian")
    {
        if((cf.myip_1.value.length>0)||(cf.myip_2.value.length>0)||(cf.myip_3.value.length>0)||(cf.myip_4.value.length>0))
        {
            if(checkIP(cf.myip_1,cf.myip_2,cf.myip_3,cf.myip_4,254)||(parseInt(cf.myip_4.value,10)==0))
                msg+= "Invalid IP address. Please enter it again, or leave it blank.";
            else if (checkIPMatchWithNetmask(cf.mymask_1,cf.mymask_2,cf.mymask_3,cf.mymask_4,cf.myip_1,cf.myip_2,cf.myip_3,cf.myip_4))
                msg+= "Invalid IP address. Please enter it again, or leave it blank.";
            else if(checkIP(cf.mymask_1,cf.mymask_2,cf.mymask_3,cf.mymask_4,255))
                msg += "Invalid subnet mask. Please enter it again.n";
            else
            {
                cf.myip_1.value = parseInt(cf.myip_1.value,10);
                cf.myip_2.value = parseInt(cf.myip_2.value,10);
                cf.myip_3.value = parseInt(cf.myip_3.value,10);
                cf.myip_4.value = parseInt(cf.myip_4.value,10);
            }
            
            var myIpAddr = (cf.myip_1.value << 24) | (cf.myip_2.value << 16) | (cf.myip_3.value << 8) | (cf.myip_4.value);
            var netMask = (cf.mymask_1.value << 24) | (cf.mymask_2.value << 16) | (cf.mymask_3.value << 8) | (cf.mymask_4.value);
            var dnsIpAddr1 = (cf.DAddr1.value << 24) | (cf.DAddr2.value << 16) | (cf.DAddr3.value << 8) | (cf.DAddr4.value);
            var dnsIpAddr2 = (cf.PDAddr1.value << 24) | (cf.PDAddr2.value << 16) | (cf.PDAddr3.value << 8) | (cf.PDAddr4.value);
            if(((myIpAddr&netMask) != (dnsIpAddr1&netMask)) && ((myIpAddr&netMask) != (dnsIpAddr2&netMask)))
            {
                //if(!((cf.mygw_1.value.length>0)||(cf.mygw_2.value.length>0)||(cf.mygw_3.value.length>0)||(cf.mygw_4.value.length>0)))
                //{
                //    msg+= "IP адрес шлюза должен быть указан.\n"; 
                //}
            }
            
            //static_pppoe_enable means the internal pppoe
            cf.static_pppoe_enable.value = 1;
        }
        else
            cf.static_pppoe_enable.value = 0;
    
        //if((cf.mygw_1.value.length>0)||(cf.mygw_2.value.length>0)||(cf.mygw_3.value.length>0)||(cf.mygw_4.value.length>0))
        //{
        //    var myIpAddr = (cf.myip_1.value << 24) | (cf.myip_2.value << 16) | (cf.myip_3.value << 8) | (cf.myip_4.value);
        //    var netMask = (cf.mymask_1.value << 24) | (cf.mymask_2.value << 16) | (cf.mymask_3.value << 8) | (cf.mymask_4.value);
        //    var myGateway = (cf.mygw_1.value << 24) | (cf.mygw_2.value << 16) | (cf.mygw_3.value << 8) | (cf.mygw_4.value);
        //    var tmpip = cf.myip_1.value+'.'+cf.myip_2.value+'.'+cf.myip_3.value+'.'+cf.myip_4.value;
        //    var tmpgateway = cf.mygw_1.value+'.'+cf.mygw_2.value+'.'+cf.mygw_3.value+'.'+cf.mygw_4.value;
        //    if((myIpAddr&netMask) != (myGateway&netMask))
        //    {
        //        msg+= 'IP-адреса' +tmpip+ 'отличается от адреса шлюза'+ tmpgateway+'\n';
        //    }
        
        //    if(checkIP(cf.mygw_1,cf.mygw_2,cf.mygw_3,cf.mygw_4,254)||(parseInt(cf.mygw_4.value,10)==0))
        //        msg+= "Invalid gateway IP address. Please enter it again.";
        //    else
        //    {
        //        cf.mygw_1.value = parseInt(cf.mygw_1.value,10);
        //        cf.mygw_2.value = parseInt(cf.mygw_2.value,10);
        //        cf.mygw_3.value = parseInt(cf.mygw_3.value,10);
        //        cf.mygw_4.value = parseInt(cf.mygw_4.value,10);
        //    }
        //}
    }

    if(cf.WANAssign[1].checked)
    {
        if(checkIP(cf.WPethr1,cf.WPethr2,cf.WPethr3,cf.WPethr4,254)||(parseInt(cf.WPethr4.value,10)==0))
            msg+= "Invalid static IP address.\n";
        //else if (region_gui == "Russian")
        //{
        //    if (    (   (cf.WMask1.value.length>0)
        //             || (cf.WMask2.value.length>0) 
        //             || (cf.WMask3.value.length>0) 
        //             || (cf.WMask4.value.length>0)
        //            )
        //         && checkIPMatchWithNetmask(cf.WMask1,cf.WMask2,cf.WMask3,cf.WMask4,cf.WPethr1,cf.WPethr2,cf.WPethr3,cf.WPethr4)
        //       )
        //        msg+= "Недопустимый статический IP-адрес.\n"; 
        //}
        else
        {
            cf.WPethr1.value = parseInt(cf.WPethr1.value,10);
            cf.WPethr2.value = parseInt(cf.WPethr2.value,10);
            cf.WPethr3.value = parseInt(cf.WPethr3.value,10);
            cf.WPethr4.value = parseInt(cf.WPethr4.value,10);
        }
        cf.pppoe_localip.value = cf.WPethr1.value+'.'+cf.WPethr2.value+'.'+cf.WPethr3.value+'.'+cf.WPethr4.value;

        if(openvpnEnable == "enable"){
            if(wan_ip != cf.pppoe_localip.value){
                alert("You have changed your Static IP address for the Internet connection, which is being used by the VPN Service. Please follow the Step 2 and Step 3 for VPN client installation to download and install the configuration files on each of your VPN client devices (overwrite existing configuration files).");
            }
        }
        
        //if (region_gui == "Russian")
        //{
        //    if((cf.WMask1.value.length>0) || (cf.WMask2.value.length>0) || (cf.WMask3.value.length>0) || (cf.WMask4.value.length>0))
        //    {
        //        if(checkIP(cf.WMask1,cf.WMask2,cf.WMask3,cf.WMask4,255))
        //            msg+= "Недопустимая маска подсети, повторите попытку.\n"; 
        //        else
        //        {
        //            cf.WMask1.value = parseInt(cf.WMask1.value,10);
        //            cf.WMask2.value = parseInt(cf.WMask2.value,10);
        //            cf.WMask3.value = parseInt(cf.WMask3.value,10);
        //            cf.WMask4.value = parseInt(cf.WMask4.value,10);
        //        }
        //        cf.pppoe_localnetmask.value = cf.WMask1.value+'.'+cf.WMask2.value+'.'+cf.WMask3.value+'.'+cf.WMask4.value;
        //    }
        //}
    }
    else
    {
        cf.pppoe_localip.value = "0.0.0.0";
        //cf.pppoe_localnetmask.value = "...";
    }
    if(cf.DNSAssign[1].checked)
    {
        if(checkIP(cf.DAddr1,cf.DAddr2,cf.DAddr3,cf.DAddr4,254)||(parseInt(cf.DAddr4.value,10)==0))
            msg+= "Invalid primary DNS address. Please enter it again.n";
        else
        {
            cf.DAddr1.value = parseInt(cf.DAddr1.value,10);
            cf.DAddr2.value = parseInt(cf.DAddr2.value,10);
            cf.DAddr3.value = parseInt(cf.DAddr3.value,10);
            cf.DAddr4.value = parseInt(cf.DAddr4.value,10);
        }
        if(cf.PDAddr1.value.length>0 || cf.PDAddr2.value.length>0 || cf.PDAddr3.value.length>0 || cf.PDAddr4.value.length>0)
        {
            if(checkIP(cf.PDAddr1,cf.PDAddr2,cf.PDAddr3,cf.PDAddr4,254)||(parseInt(cf.PDAddr4.value,10)==0))
                msg+= "Invalid secondary DNS address. Please enter it again.n";
            else
            {
                cf.PDAddr1.value = parseInt(cf.PDAddr1.value,10);
                cf.PDAddr2.value = parseInt(cf.PDAddr2.value,10);
                cf.PDAddr3.value = parseInt(cf.PDAddr3.value,10);
                cf.PDAddr4.value = parseInt(cf.PDAddr4.value,10);
            }
        }
    }
<!-- <% is_jp_region("jp_js_remove_start"); %> -->
    <!-- if( checkMacStr(cf.Spoofmac) || MacStrallf(cf.Spoofmac) ) -->
        <!-- msg+= "Invalid MAC address."; -->
<!-- <% is_jp_region("jp_js_remove_end"); %> -->
    if (msg.length > 1)
    {
        alert(msg);
        return false;
    }
    
    //Check whether to enable static pppoe mode
    //if (region_gui == "Russian")
    //{
    //    if((cf.WANAssign[1].checked) && (cf.WMask1.value.length>0) && (cf.WMask2.value.length>0) && (cf.WMask3.value.length>0) && (cf.WMask4.value.length>0))
    //        cf.static_pppoe_enable.value = 1;
    //    else
    //        cf.static_pppoe_enable.value = 0;
    //}

    //Check whether to enable internet static pppoe mode
    //pppoe_ip_sel means internet pppoe connection
    if(cf.WANAssign[1].checked)
        cf.pppoe_ip_sel.value = 1;
    else
        cf.pppoe_ip_sel.value = 0;

    if (region_gui == "Russian") {
        cf.pppoe_user_netmask.value = cf.mymask_1.value+'.'+cf.mymask_2.value+'.'+cf.mymask_3.value+'.'+cf.mymask_4.value;
        cf.pppoe_user_ip.value = cf.myip_1.value+'.'+cf.myip_2.value+'.'+cf.myip_3.value+'.'+cf.myip_4.value;
        //cf.pppoe_gateway.value = cf.mygw_1.value+'.'+cf.mygw_2.value+'.'+cf.mygw_3.value+'.'+cf.mygw_4.value;
    }
    cf.wan_dns1_pri.value = cf.DAddr1.value+'.'+cf.DAddr2.value+'.'+cf.DAddr3.value+'.'+cf.DAddr4.value;
    cf.wan_dns1_sec.value = cf.PDAddr1.value+'.'+cf.PDAddr2.value+'.'+cf.PDAddr3.value+'.'+cf.PDAddr4.value;
//<% is_jp_region("jp_js_remove_start"); %>
//    cf.wan_hwaddr2.value = cf.Spoofmac.value;
//<% is_jp_region("jp_js_remove_end"); %>
    if(cf.opendns_parental_ctrl.value == "1")
    {
        if(cf.DNSAssign[0].checked || (cf.wan_dns1_pri.value != "208.67.222.222") || (cf.wan_dns1_sec.value != "208.67.220.220"))
        {
            if (!confirm("To configure the DNS Setting will disable OpenDNS Parental Control. Do you want to continue?"))
                return false;
        }
    }
/*
<% is_jp_region("jp_js_start"); %>
        cf.pppoe_temp.value = "4";

<% is_jp_region("jp_js_end"); %>
    cf.wan_aggr.value = ($("#topframe").contents()[0].forms[0].WANAggr[1].checked)? "1" : "0";
    <% nvram_invmatch("support_2dot5g_wan", "1", "/*") %>
    if($("#topframe").contents()[0].forms[0].WANAggr[2].checked) // aggr
       cf.wan_aggr.value = "1";
    else if($("#topframe").contents()[0].forms[0].WANAggr[1].checked)//multigiga
        cf.wan_aggr.value = "2";
    else //internet
        cf.wan_aggr.value = "0";*/
  //  <% nvram_invmatch("support_2dot5g_wan", "1", "*/") %>
   /* 
    setDisabled(false,cf.pppoe_dod);
    
<% is_jp_region("jp_js_remove_start"); %>
    return sumvalue(cf);
<% is_jp_region("jp_js_remove_end"); %>

<% is_jp_region("jp_js_start"); %>
    return true;
<% is_jp_region("jp_js_end"); %>    
*/
}

function loadSettings()
{
    var cf = document.forms[0];
    var pppoe_user_ip = cf.pppoe_user_ip.value.split(".");
    var pppoe_user_netmask = cf.pppoe_user_netmask.value.split(".");
    var pppoe_gateway = cf.pppoe_gateway.value.split(".");
    var region_gui = cf.gui_region.value;

    var wan_ipaddr = cf.wan_ipaddr.value.split(".");
    var pppoe_localip = cf.pppoe_localip.value.split(".");
    //var pppoe_localnetmask = cf.pppoe_localnetmask.value.split(".");
    var wan_dns_sel = cf.wan_dns_sel.value;
    var wan_dns1_pri = cf.wan_dns1_pri.value.split(".");
    var wan_dns1_sec = cf.wan_dns1_sec.value.split(".");
    var wan_hwaddr_sel = cf.wan_hwaddr_sel.value;
    cf.pppoe_idletime.value = NVRAM_pppoe_idletime / 60;
    var wan_auto_dns_pri = cf.wan_auto_dns_pri.value.split(".");
    var wan_auto_dns_sec = cf.wan_auto_dns_sec.value.split(".");
    
/*
    if(autoconn_flag == 1)
        initSelect();
*/
    // Get pppoe_dod (nvram)
    cf.pppoe_dod.selectedIndex = NVRAM_pppoe_dod;
    CurrentDodIndex=cf.pppoe_dod.selectedIndex;
    if(cf.gui_language.value == "German")
    {
        var selectObj = document.getElementById("auto_conn_time_id");
        
        cf.auto_conn_time_default.value = parseInt(cf.auto_time.value, 10);
        selectObj.value = parseInt(cf.auto_time.value, 10);
    }
    /*
    if (cf.pppoe_dod.selectedIndex == 1)
    {
        DodDisable = false;
        if(cf.gui_language.value == "German")
        {
            cf.auto_conn_24hr.disabled = true;
            cf.auto_conn_time.disabled = true;
        }
    }
    else
    {
        DodDisable = true;
        if(cf.gui_language.value == "German")
        {
            cf.auto_conn_24hr.disabled = false;
            cf.auto_conn_time.disabled = false;
        }
    }
    */
    show_idleout(cf, cf.pppoe_dod.selectedIndex);
    
    setDisabled(DodDisable,cf.pppoe_idletime);
    if (cf.ipv6_proto.value == "6to4" || 
        (cf.ipv6_proto.value == "auto" && cf.ipv6_proto_auto.value == "6to4"))
    {
        cf.pppoe_dod.selectedIndex = 0;
        setDisabled(true,cf.pppoe_dod);
        setDisabled(true,cf.pppoe_idletime);
    }
    
    //Internal PPPoE interface
    if( region_gui == "Russian")
    {
        if(cf.static_pppoe_enable.value == 1)
        {
            if (cf.pppoe_user_ip.value != "")
            {
                cf.myip_1.value = pppoe_user_ip[0];
                cf.myip_2.value = pppoe_user_ip[1];
                cf.myip_3.value = pppoe_user_ip[2];
                cf.myip_4.value = pppoe_user_ip[3];
            }
            if (cf.pppoe_user_netmask.value != "")
            {
                cf.mymask_1.value = pppoe_user_netmask[0];
                cf.mymask_2.value = pppoe_user_netmask[1];
                cf.mymask_3.value = pppoe_user_netmask[2];
                cf.mymask_4.value = pppoe_user_netmask[3];
            }
    
            //if (cf.pppoe_gateway.value != "")
            //{
            //    cf.mygw_1.value = pppoe_gateway[0];
            //    cf.mygw_2.value = pppoe_gateway[1];
            //    cf.mygw_3.value = pppoe_gateway[2];
            //    cf.mygw_4.value = pppoe_gateway[3];
            //}                        
        }
        else
        {
            //setDisabled(true, cf.mygw_1, cf.mygw_2, cf.mygw_3, cf.mygw_4);
        }
        if ( (cf.pppoe_user_ip.value == "...") || (cf.pppoe_user_ip.value == "") )
        {
            //setDisabled(true, cf.mygw_1, cf.mygw_2, cf.mygw_3, cf.mygw_4);
        }
    }

    //Internet PPPoE interface
    if (cf.pppoe_localip.value == "0.0.0.0")
    {
      cf.WANAssign[0].checked = true;
      cf.WPethr1.value = wan_ipaddr[0];
      cf.WPethr2.value = wan_ipaddr[1];
      cf.WPethr3.value = wan_ipaddr[2];
      cf.WPethr4.value = wan_ipaddr[3];
    }
    else
    {
      cf.WANAssign[1].checked = true;
      cf.WPethr1.value = pppoe_localip[0];
      cf.WPethr2.value = pppoe_localip[1];
      cf.WPethr3.value = pppoe_localip[2];
      cf.WPethr4.value = pppoe_localip[3];
    }
    //if (region_gui == "Russian")
    //{
    //    cf.WMask1.value = pppoe_localnetmask[0];
    //    cf.WMask2.value = pppoe_localnetmask[1];
    //    cf.WMask3.value = pppoe_localnetmask[2];
    //    cf.WMask4.value = pppoe_localnetmask[3];
    //}
    setIP();
    cf.DNSAssign[wan_dns_sel].checked = true;
    setDNS();
    if(wan_dns_sel=="1")
    {
        if (cf.wan_dns1_pri.value != "")
        {
            cf.DAddr1.value = wan_dns1_pri[0];
            cf.DAddr2.value = wan_dns1_pri[1];
            cf.DAddr3.value = wan_dns1_pri[2];
            cf.DAddr4.value = wan_dns1_pri[3];
        }
        if (cf.wan_dns1_sec.value != "")
        {
            cf.PDAddr1.value = wan_dns1_sec[0];
            cf.PDAddr2.value = wan_dns1_sec[1];
            cf.PDAddr3.value = wan_dns1_sec[2];
            cf.PDAddr4.value = wan_dns1_sec[3];
        }
    } else
    {
        if (cf.wan_auto_dns_pri.value != "")
        {
            cf.DAddr1.value = wan_auto_dns_pri[0];
            cf.DAddr2.value = wan_auto_dns_pri[1];
            cf.DAddr3.value = wan_auto_dns_pri[2];
            cf.DAddr4.value = wan_auto_dns_pri[3];
        }
        if (cf.wan_auto_dns_sec.value != "")
        {
            cf.PDAddr1.value = wan_auto_dns_sec[0];
            cf.PDAddr2.value = wan_auto_dns_sec[1];
            cf.PDAddr3.value = wan_auto_dns_sec[2];
            cf.PDAddr4.value = wan_auto_dns_sec[3];
        }
    }


}

function myip_update()
{
    var cf = document.forms[0];

    if((cf.myip_1.value.length>0)&&(cf.myip_2.value.length>0)&&(cf.myip_3.value.length>0)&&(cf.myip_4.value.length>0))
    {
        //setDisabled(false, cf.mygw_1, cf.mygw_2, cf.mygw_3, cf.mygw_4);
    }
    else
    {
        //setDisabled(true, cf.mygw_1, cf.mygw_2, cf.mygw_3, cf.mygw_4);
    } 
}



function pw_onfocus()
{
    var cf = document.forms[0];
    cf.pppoe_passwd.value = "";
    
    document.getElementById("passwdEnterStatus").innerHTML="<input id=\"pppoe_passwd\" class=\"input1\" type=\"text\" name=\"pppoe_passwd\" size=\"15\" style=\"width:180px\" maxlength=\"63\" value=\"\">";       
    setTimeout("document.forms[0].pppoe_passwd.focus();", 50);
    return true;
}

function doTypeChange( newIndex )
{
    // var cf = document.forms[0];
    //var wan_proto = cf.wan_proto.value;

    if (newIndex == 0)
    {
        window.location.href = "BAS_ether.htm";
    } 
    else if (newIndex == 1)
    {
        /*if (wan_proto == "pptp")
            window.location.href = "BAS_pptp.htm";
        else if (wan_proto == "l2tp")
            window.location.href = "BAS_l2tp.htm";   
        else*/
            window.location.href = "BAS_pppoe.htm";
    }
}
</script>
</html>
